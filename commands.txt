# Start a wagtail project 
docker compose run web wagtail start ruzivoflow .

# Apply all Django/Wagtail migrations
docker compose run web python manage.py migrate


# Create admin user to log into Wagtail admin
docker compose run web python manage.py createsuperuser


# Collect static files for production
docker compose run web python manage.py collectstatic --noinput

# ------------------------------
# BACKUP POSTGRESQL DATABASE
# ------------------------------

# 1️⃣ Backup PostgreSQL database to a file inside the container
docker compose exec db pg_dump -U postgres -d ruzivoflow_db -F c -f /var/lib/postgresql/data/data_backup.dump

# 2️⃣ Copy backup from container to local machine
docker cp postgres_db:/var/lib/postgresql/data/data_backup.dump ./data_backup.dump

# ------------------------------
# RESTORE POSTGRESQL DATABASE
# ------------------------------

# 3️⃣ Copy local backup file back into the container (if needed)
docker cp ./data_backup.dump postgres_db:/var/lib/postgresql/data/data_backup.dump

# 4️⃣ Restore database from backup inside container
# Option 1: Using explicit values
docker compose exec db pg_restore -U postgres -d ruzivoflow_db /var/lib/postgresql/data/data_backup.dump

# Option 2: Using PowerShell environment variables (if you set them)
# docker compose exec db pg_restore -U $env:POSTGRES_USER -d $env:POSTGRES_DB /var/lib/postgresql/data/data_backup.dump


# ------------------------------
# VPS Commands
# ------------------------------

sudo apt update && sudo apt upgrade -y


sudo apt update

sudo apt upgrade -y

# Allow HTTP (port 80)
sudo ufw allow 80/tcp

# Allow HTTPS (port 443)
sudo ufw allow 443/tcp

# (optional) allow SSH if not already
sudo ufw allow 22/tcp

sudo ufw reload

sudo ufw status



# ------------------------------
# Certbot Docker Installing
# ------------------------------

docker volume create certbot-etc
docker volume create certbot-var

Update docker-compose.yml

services:
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./nginx/conf.d:/etc/nginx/conf.d  # So Certbot can access nginx config if needed
    entrypoint: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; certbot renew; done'"
    restart: unless-stopped

nginx

server {
    listen 80;
    server_name databet.co.za;

    location /.well-known/acme-challenge/ {
        alias /app/static/.well-known/acme-challenge/;
    }


    location /static/ {
        alias /app/static/;  # Point to your STATIC_ROOT
    }

    location /media/ {
        alias /app/media/;   # Point to your MEDIA_ROOT
    }

    location / {
        proxy_pass http://web:8000; # Gunicorn container
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}


3.2 Run Certbot using webroot

docker compose run --rm certbot certonly --webroot --webroot-path /app/static -d databet.co.za

for testing 

docker compose run --rm certbot certonly --webroot --webroot-path /app/static -d databet.co.za --dry-run



# ------------------------------
# Installing Docker
# ------------------------------


sudo apt install -y ca-certificates curl gnupg lsb-release

sudo install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
  sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
sudo chmod a+r /etc/apt/keyrings/docker.gpg

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
  https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null


sudo apt update
sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

docker --version
docker run hello-world

mkdir -p ~/webapps

cd ~/webapps

sudo git clone https://github.com/kelvinmaringire/ruzivoflow-api.git

cd ruzivoflow-api

nano .env

Copy .env files

chmod +x entrypoint.sh

docker compose up -d



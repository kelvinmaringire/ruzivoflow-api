# üöÄ Wagtail + Docker + VPS Setup Commands

This guide organizes your commands into a clear, step-by-step process with headings, emojis, and comments.

---

## üê≥ 1. Install Docker on VPS

```bash
# Update and install required packages
sudo apt update && sudo apt install -y ca-certificates curl gnupg lsb-release

# Add Docker‚Äôs official GPG key
sudo install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
  sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
sudo chmod a+r /etc/apt/keyrings/docker.gpg

# Add Docker repo
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
  https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# Install Docker Engine, CLI, and Compose plugin
sudo apt update
sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

# Verify installation
docker --version
docker run hello-world
```

---

## üîê 2. VPS Firewall Setup

```bash
# Update & upgrade system
sudo apt update && sudo apt upgrade -y

# Allow HTTP (port 80)
sudo ufw allow 80/tcp

# Allow HTTPS (port 443)
sudo ufw allow 443/tcp

# Allow SSH (port 22) - ‚ö†Ô∏è ensure this is enabled or you‚Äôll lose access
sudo ufw allow 22/tcp

# Reload firewall
sudo ufw reload

# Check firewall status
sudo ufw status
```

---

## üì¶ 3. Clone and Setup Wagtail Project

```bash
# Create apps folder
mkdir -p ~/webapps
cd ~/webapps

# Clone your project
sudo git clone https://github.com/kelvinmaringire/ruzivoflow-api.git
cd ruzivoflow-api

# Add environment variables
nano .env   # (paste your environment variables here)

# Make entrypoint executable
chmod +x entrypoint.sh

# Start services
docker compose up -d
```

---

## ü¶Ñ 4. Wagtail Project Commands

```bash
# Start a new Wagtail project
docker compose run web wagtail start ruzivoflow .

# Apply all Django/Wagtail migrations
docker compose run web python manage.py migrate

# Create admin user
docker compose run web python manage.py createsuperuser

# Collect static files for production
docker compose run web python manage.py collectstatic --noinput
```

docker compose exec web pip freeze > requirements.txt 

---

## üóÑÔ∏è 5. PostgreSQL Backup & Restore

### üîπ Backup Database

```bash
# Backup inside container
docker compose exec db pg_dump -U postgres -d ruzivoflow_db -F c -f /var/lib/postgresql/data/data_backup.dump

# Copy backup to local machine
docker cp db:/var/lib/postgresql/data/data_backup.dump ./data_backup.dump
```

### üîπ Restore Database

```bash
# Copy backup back into container
docker cp ./data_backup.dump db:/var/lib/postgresql/data/data_backup.dump

# Restore using pg_restore
docker compose exec db pg_restore -U postgres -d ruzivoflow_db /var/lib/postgresql/data/data_backup.dump
```

---

## üîí 6. SSL with Certbot (Docker)

### Create Volumes

```bash
docker volume create certbot-etc
docker volume create certbot-var
```

### Update `docker-compose.yml`

```yaml
services:
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./nginx/conf.d:/etc/nginx/conf.d
    entrypoint: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; certbot renew; done'"
    restart: unless-stopped
```

### Run Certbot (Webroot)

```bash
docker compose run --rm --entrypoint certbot certbot certonly \
  --webroot --webroot-path /app/static -d databet.co.za

# Test dry-run
docker compose run --rm --entrypoint certbot certbot certonly \
  --webroot --webroot-path /app/static -d databet.co.za --dry-run

# Reload nginx after SSL issued
docker compose exec nginx nginx -s reload
```

---

## üåê 7. Nginx Config (HTTP ‚Üí HTTPS)

### `nginx/conf.d/databet.conf`

```nginx
# Redirect www.databet.co.za to databet.co.za
server {
    listen 80;
    server_name www.databet.co.za;
    return 301 http://databet.co.za$request_uri;
}

# Main HTTP server (forces HTTPS)
server {
    listen 80;
    server_name databet.co.za;

    location /.well-known/acme-challenge/ {
        alias /app/static/.well-known/acme-challenge/;
    }

    location /static/ {
        alias /app/static/;  # Point to your STATIC_ROOT
    }

    location /media/ {
        alias /app/media/;   # Point to your MEDIA_ROOT
    }
    
    # Force HTTPS for everything else
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl;
    server_name databet.co.za;

    ssl_certificate     /etc/letsencrypt/live/databet.co.za/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/databet.co.za/privkey.pem;

    # security / performance tweaks (optional but recommended)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location /static/ {
        alias /app/static/;
    }

    location /media/ {
        alias /app/media/;
    }

    location / {
        proxy_pass http://web:8000; # Gunicorn container
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

```
